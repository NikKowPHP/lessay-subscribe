// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Onboarding {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id])
  steps                   Json
  completed               Boolean  @default(false)
  learningPurpose         String?
  nativeLanguage          String?
  targetLanguage          String?
  proficiencyLevel        ProficiencyLevel?
  initialAssessmentCompleted Boolean @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("onboarding")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  onboarding Onboarding?
  assessmentLessons AssessmentLesson[]
  lessons Lesson[]
}

enum ProficiencyLevel {
  beginner
  intermediate
  advanced
}

enum LessonGenerationStatus {
  pending
  completed
  failed
}

model AssessmentLesson {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  step          Int
  prompt        String
  modelAnswer   String
  userResponse  String?
  completed     Boolean  @default(false)
  sourceLanguage String  // User's native language
  targetLanguage String  // User's target language
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("assessment_lessons")
}
model Lesson {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  lessonId            String
  focusArea           String
  targetSkills        String[]
  performanceMetrics  Json?

  completed           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  steps               LessonStep[]

  @@map("lessons")
}


enum LessonStepType {
  prompt
  model_answer // messages like 'great job'
  user_answer
  new_word
  practice
}

model LessonStep {
  id              String   @id @default(cuid())
  lessonId        String
  lesson          Lesson   @relation(fields: [lessonId], references: [id])
  stepNumber      Int
  type            LessonStepType
  content         String
  contentAudioUrl String?
  translation     String?
  expectedAnswer  String?
  expectedAnswerAudioUrl String?
  userResponse    String?
  attempts        Int      @default(0)
  correct         Boolean  @default(false)
  lastAttemptAt   DateTime?
  errorPatterns   String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("lesson_steps")
}