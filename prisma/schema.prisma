// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Onboarding {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps                   Json
  completed               Boolean  @default(false)
  learningPurpose         String?
  nativeLanguage          String?
  targetLanguage          String?
  proficiencyLevel        ProficiencyLevel?
  initialAssessmentCompleted Boolean @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("onboarding")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  onboarding Onboarding?
  assessmentLessons AssessmentLesson[]
  lessons Lesson[]
  payments          Payment[]
  learningProgress  LearningProgress? 
  subscriptionStatus SubscriptionStatus @default(NONE) // Added
  subscriptionId    String?            @unique // Added: Store Stripe Subscription ID if using Stripe Subscriptions
  subscriptionEndDate DateTime?


}

enum ProficiencyLevel {
  beginner
  intermediate
  advanced
}

enum LessonGenerationStatus {
  pending
  completed
  failed
}

enum AssessmentStepType {
  question        // Assessment question
  feedback        // Feedback on user's answer
  instruction     // Instructions for the assessment
  summary         // Assessment summary/results
}
enum LessonStepType {
  prompt
  feedback // messages like 'great job'
  new_word
  practice
  instruction 
  summary    
}

enum MasteryLevel {
  NotStarted
  Seen         // Introduced but not practiced much
  Learning     // Actively being practiced
  Practiced    // Practiced multiple times, showing some retention
  Known        // Generally recalled correctly
  Mastered     // Consistently recalled correctly over time
}



model AssessmentLesson {
  id                String   @id @default(cuid())
  userId            String   @unique // Only one assessment per user
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description       String?  // Brief description if needed
  completed         Boolean  @default(false)
  sourceLanguage    String   // User's native language
  targetLanguage    String   // User's target language
  // Assessment metrics
  metrics           Json?    // Store assessment metrics like accuracy, pronunciation scores, etc.
  proposedTopics    String[] // Topics suggested based on assessment performance
  summary           String?  // Overall assessment summary
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  steps             AssessmentStep[]
  audioMetrics      AudioMetrics?
  sessionRecordingUrl String?
  @@map("assessment_lessons")
}

model AssessmentStep {
  id                String           @id @default(cuid())
  assessmentId      String
  assessment        AssessmentLesson @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  stepNumber        Int
  type              AssessmentStepType
  content           String
  contentAudioUrl   String?
  translation       String?
  expectedAnswer    String?
  expectedAnswerAudioUrl String?
  maxAttempts       Int              @default(3)  // Maximum attempts before showing correct answer
  userResponse      String?
  userResponseHistory Json?
  attempts          Int              @default(0)
  correct           Boolean          @default(false)
  lastAttemptAt     DateTime?
  feedback          String?          // Feedback specific to this step
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("assessment_steps")
}

model Lesson {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId            String
  focusArea           String
  targetSkills        String[]
  performanceMetrics  Json?
  completed           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  steps               LessonStep[]
  audioMetrics        AudioMetrics?
  sessionRecordingUrl String?

  @@map("lessons")
}


model LessonStep {
  id              String   @id @default(cuid())
  lessonId        String
  lesson          Lesson   @relation(fields: [lessonId], references: [id])
  stepNumber      Int
  type            LessonStepType
  content         String
  contentAudioUrl String?
  translation     String?
  expectedAnswer  String?
  expectedAnswerAudioUrl String?
  userResponse    String?
  userResponseHistory Json?
  attempts        Int      @default(0)
  maxAttempts     Int      @default(3)  // Maximum attempts before showing correct answer
  correct         Boolean  @default(false)
  lastAttemptAt   DateTime?
  errorPatterns   String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("lesson_steps")
}

enum LearningTrajectory {
  steady
  accelerating
  plateauing
}

enum LanguageInfluenceLevel {
  minimal
  moderate
  strong
}

enum SpeechRateEvaluation {
  slow
  appropriate
  fast
}

enum HesitationFrequency {
  rare
  occasional
  frequent
}

enum PriorityLevel {
  low
  medium
  high
}

enum SeverityLevel {
  minor
  moderate
  major
}

enum VocabularyRange {
  limited
  adequate
  extensive
}

enum ComprehensionLevel {
  poor
  fair
  good
  excellent
}

model AudioMetrics {
  id                    String   @id @default(cuid())
  // Relationships
  lessonId              String?  @unique
  lesson                Lesson?  @relation(fields: [lessonId], references: [id])
  assessmentLessonId    String?  @unique
  assessmentLesson      AssessmentLesson? @relation(fields: [assessmentLessonId], references: [id])
  
  // Top-level metrics for easy querying
  pronunciationScore    Float
  fluencyScore          Float
  grammarScore          Float
  vocabularyScore       Float
  overallPerformance    Float
  
  // CEFR level and trajectory
  proficiencyLevel      String    // CEFR level: A1-C2 (keeping as String for flexibility)
  learningTrajectory    LearningTrajectory
  
  // Detailed analysis sections as JSON
  pronunciationAssessment Json    // Full pronunciation analysis
  fluencyAssessment      Json    // Full fluency analysis
  grammarAssessment      Json    // Full grammar analysis
  vocabularyAssessment   Json    // Full vocabulary analysis
  exerciseCompletion     Json    // Exercise-specific analysis
  
  // Learning recommendations
  suggestedTopics       String[]
  grammarFocusAreas     String[]
  vocabularyDomains     String[]
  nextSkillTargets      String[]
  
  // Learning style observations
  preferredPatterns     String[]
  effectiveApproaches   String[]
  
  // Metadata
  audioRecordingUrl     String?  // Optional URL to the audio file
  recordingDuration     Float?   // Optional duration in seconds
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("audio_metrics")
}


model LearningProgress {
  id                        String           @id @default(cuid())
  userId                    String           @unique
  user                      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  estimatedProficiencyLevel ProficiencyLevel @default(beginner) // Overall estimated level
  overallScore              Float?           // Calculated score (e.g., 0-100) based on recent performance
  learningTrajectory        LearningTrajectory @default(steady) // How is the user progressing?
  strengths                 String[]         // Areas where the user excels (e.g., "Verb Conjugation", "Travel Vocabulary")
  weaknesses                String[]         // Areas needing improvement (e.g., "Pronunciation of 'Ã¼'", "Dative Case")
  lastLessonCompletedAt     DateTime?
  lastAssessmentCompletedAt DateTime?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt

  topics                    TopicProgress[]  // Relation to topics studied
  words                     WordProgress[]   // Relation to words encountered

  @@map("learning_progress")
}

model TopicProgress {
  id                 String         @id @default(cuid())
  learningProgressId String
  learningProgress   LearningProgress @relation(fields: [learningProgressId], references: [id], onDelete: Cascade)
  topicName          String         // e.g., "Greetings", "Ordering Food", "Past Tense"
  masteryLevel       MasteryLevel   @default(NotStarted)
  lastStudiedAt      DateTime?
  relatedLessonIds   String[]       // IDs of lessons covering this topic
  relatedAssessmentIds String[]     // IDs of assessments covering this topic
  score              Float?         // Optional score specific to this topic based on related lessons/steps

  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@unique([learningProgressId, topicName]) // Ensure unique topic per user progress
  @@map("topic_progress")
}

model WordProgress {
  id                  String         @id @default(cuid())
  learningProgressId  String
  learningProgress    LearningProgress @relation(fields: [learningProgressId], references: [id], onDelete: Cascade)
  word                String         // The word or phrase in the target language
  translation         String?        // Translation in the user's native language
  masteryLevel        MasteryLevel   @default(Seen)
  timesCorrect        Int            @default(0)
  timesIncorrect      Int            @default(0)
  firstSeenAt         DateTime       @default(now())
  lastReviewedAt      DateTime?
  relatedLessonStepIds String[]       // IDs of lesson steps where this word appeared
  relatedAssessmentStepIds String[] // IDs of assessment steps where this word appeared

  // Optional fields for Spaced Repetition System (SRS) - future enhancement
  // nextReviewDate    DateTime?
  // interval          Int?           // Interval in days
  // easeFactor        Float?         // Factor influencing next interval

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@unique([learningProgressId, word]) // Ensure unique word per user progress
  @@index([learningProgressId, masteryLevel]) // Index for querying words by mastery
  @@map("word_progress")
}


model Payment {
  id                    String    @id @default(cuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripePaymentIntentId String    @unique // Stripe Payment Intent ID
  status                PaymentStatus @default(PENDING)
  amount                Int       // Amount in smallest currency unit (e.g., cents for USD)
  currency              String    // e.g., "usd"

  // Link to what was purchased (adapt as needed)
  productId             String?   // e.g., a specific course ID, subscription plan ID
  productType           String?   // e.g., "course", "subscription", "credits"

  errorMessage          String?   // Store error message if payment failed
  metadata              Json?     // Store any additional metadata if needed

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING    // Initial status when intent is created
  PROCESSING // Payment is being processed (optional intermediate state)
  SUCCEEDED  // Payment successful
  FAILED     // Payment failed
  REQUIRES_ACTION // Needs further user action (e.g., 3D Secure)
  CANCELED   // Payment was canceled
}


enum SubscriptionStatus {
 NONE     // No active subscription or trial
 TRIAL    // User is on a free trial
 ACTIVE   // User has an active paid subscription
 CANCELED // Subscription was canceled but might still be active until end date
 PAST_DUE // Payment failed, subscription inactive
 }






